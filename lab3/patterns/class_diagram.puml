@startuml mvc

package "Model" {
  class User {
    +__construct()
    
  }

class Users {
    +$collection: void
    +__construct()
  }
}

package "View" {

abstract class ViewFactory {
    +{abstract} render(): String
    +create(): ViewFactory
  }

class HtmlView {
    const $LAYOUT
    # $replacements: array: mixed
    +__construct()
    +render(): String
}

class MdView {
    # $markdownParser: mixed
    # $replacements: array: mixed
    +__construct()
    +render(): String
}

class RssView {
    const $LAYOUT
    # $replacements: array: mixed
    +__construct()
    +render(): String
}

class UserHtmlView {}
class UsersHtmlView {}

class UserMdView {}
class UsersMdView {}

class UserRssView {}
class UsersRssView {}

}

package "Controller" {
class Controller {
    +$model: Model
    +$path: String
    +$router: Router
    +__construct(String: $path)
    +render(): String
  }

class Router {
    +$model: String
    +$ext: String
    +$id: int
    +parse(String: $path): Router
    +__construct()

}
}

package "Decorators" {
abstract class DecoratorFactory{
    +create(String: $class, Object: $model)
    +{abstract} title(): String
    +{abstract} body(): String
    +{abstract} items(): String
}

class UserDecorator {
    +$user: void
    +__construct()
    +title(): String
    +body(): String
    +items(): String

}

class UsersDecorator {
    +$users: void
    +__construct()
    +title(): String
    +collection_render(): String
    +body(): String
    +items(): String
}

}

DecoratorFactory <|-- UsersDecorator
DecoratorFactory <|-- UserDecorator

ViewFactory <|-- HtmlView
ViewFactory <|-- MdView 
ViewFactory <|-- RssView

HtmlView <|-- UserHtmlView
HtmlView <|-- UsersHtmlView

MdView <|-- UserMdView
MdView <|-- UsersMdView

RssView <|-- UserRssView
RssView <|-- UsersRssView

@enduml